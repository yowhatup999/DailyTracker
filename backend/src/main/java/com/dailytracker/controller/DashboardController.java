// src/main/java/com/dailytracker/controller/DashboardController.java
package com.dailytracker.controller;

import com.dailytracker.dto.*;
import com.dailytracker.model.DailyEntry;
import com.dailytracker.model.User;
import com.dailytracker.service.DailyEntryService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/dashboard")
@RequiredArgsConstructor
public class DashboardController {

    private final DailyEntryService dailyEntryService;

    @GetMapping("/info")
    public DashboardInfoResponse getDashboardInfo(@AuthenticationPrincipal User user) {
        DailyEntry entry = dailyEntryService.getOrCreateTodayForUser(user);
        dailyEntryService.updateMissingAstroData(entry);

        WeatherDTO weather = new WeatherDTO(
                entry.getWetterStatus(),
                entry.getWetterTemp(),
                entry.getWetterLuftdruck(),
                getWeatherEmoji(entry.getWetterStatus())
        );
        MoonDTO moon = new MoonDTO(
                entry.getMondphase(),
                getMoonEmoji(entry.getMondphase())
        );

        List<SupplementDashboardDTO> supplements = dailyEntryService.getDashboardSupplementsForUserAndDay(user, entry);
        List<CustomEntryDashboardDTO> customs = dailyEntryService.getDashboardCustomsForUserAndDay(user, entry);

        return new DashboardInfoResponse(
                user.getDisplayName(),
                weather,
                moon,
                supplements,
                customs
        );
    }

    private String getWeatherEmoji(String status) {
        if (status == null) return "‚ùó";
        return switch (status.toLowerCase()) {
            case "sonnig" -> "‚òÄÔ∏è";
            case "bew√∂lkt" -> "‚òÅÔ∏è";
            case "teilweise bew√∂lkt" -> "‚õÖ";
            case "regen" -> "üåßÔ∏è";
            case "schnee" -> "üå®Ô∏è";
            case "gewitter" -> "‚õàÔ∏è";
            case "nebel" -> "üå´Ô∏è";
            default -> "üåà";
        };
    }

    private String getMoonEmoji(String phase) {
        if (phase == null) return "‚ùì";
        return switch (phase.toLowerCase()) {
            case "neumond" -> "üåë";
            case "zunehmende sichel" -> "üåí";
            case "erstes viertel" -> "üåì";
            case "zunehmender mond" -> "üåî";
            case "vollmond" -> "üåï";
            case "abnehmender mond" -> "üåñ";
            case "letztes viertel" -> "üåó";
            case "abnehmende sichel" -> "üåò";
            default -> "‚ùì";
        };
    }
}